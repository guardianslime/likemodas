# ==============================================================================
# ARCHIVO 1: alembic/versions/dc72dd3b2fae_.py (PARA REEMPLAZAR)
# Descripción: Esta es tu migración inicial, corregida para incluir los
# campos de baneo desde el principio.
# ==============================================================================
"""empty message

Revision ID: dc72dd3b2fae
Revises: 
Create Date: 2025-08-07 20:19:14.644610

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = 'dc72dd3b2fae'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('localauthsession',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.String(length=255), nullable=False),
    sa.Column('expiration', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('localauthsession', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_localauthsession_session_id'), ['session_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_localauthsession_user_id'), ['user_id'], unique=False)

    op.create_table('localuser',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.LargeBinary(), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('localuser', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_localuser_username'), ['username'], unique=True)

    op.create_table('passwordresettoken',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['localuser.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('passwordresettoken', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_passwordresettoken_token'), ['token'], unique=True)

    op.create_table('userinfo',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), server_default='customer', nullable=False),
    sa.Column('is_verified', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('is_banned', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('ban_expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['localuser.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    
    op.create_table('blogpostmodel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userinfo_id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('attributes', sa.JSON(), nullable=True),
    sa.Column('image_urls', sa.JSON(), nullable=True),
    sa.Column('publish_active', sa.Boolean(), nullable=False),
    sa.Column('publish_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('category', sa.String(), server_default='otros', nullable=False),
    sa.ForeignKeyConstraint(['userinfo_id'], ['userinfo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('contactentrymodel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userinfo_id', sa.Integer(), nullable=True),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('message', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['userinfo_id'], ['userinfo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notificationmodel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userinfo_id', sa.Integer(), nullable=False),
    sa.Column('message', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['userinfo_id'], ['userinfo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('purchasemodel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userinfo_id', sa.Integer(), nullable=False),
    sa.Column('purchase_date', sa.DateTime(), nullable=False),
    sa.Column('confirmed_at', sa.DateTime(), nullable=True),
    sa.Column('total_price', sa.Float(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', 'SHIPPED', name='purchasestatus'), nullable=False),
    sa.Column('shipping_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('shipping_city', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('shipping_neighborhood', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('shipping_address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('shipping_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['userinfo_id'], ['userinfo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('shippingaddress',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userinfo_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('neighborhood', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['userinfo_id'], ['userinfo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('verificationtoken',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('userinfo_id', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['userinfo_id'], ['userinfo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('verificationtoken', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_verificationtoken_token'), ['token'], unique=True)

    op.create_table('commentmodel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('userinfo_id', sa.Integer(), nullable=False),
    sa.Column('blog_post_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['blog_post_id'], ['blogpostmodel.id'], ),
    sa.ForeignKeyConstraint(['userinfo_id'], ['userinfo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('purchaseitemmodel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('purchase_id', sa.Integer(), nullable=False),
    sa.Column('blog_post_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('price_at_purchase', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['blog_post_id'], ['blogpostmodel.id'], ),
    sa.ForeignKeyConstraint(['purchase_id'], ['purchasemodel.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('commentvotemodel',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('vote_type', sa.String(), nullable=True),
    sa.Column('userinfo_id', sa.Integer(), nullable=False),
    sa.Column('comment_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['comment_id'], ['commentmodel.id'], ),
    sa.ForeignKeyConstraint(['userinfo_id'], ['userinfo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('commentvotemodel')
    op.drop_table('purchaseitemmodel')
    op.drop_table('commentmodel')
    with op.batch_alter_table('verificationtoken', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_verificationtoken_token'))

    op.drop_table('verificationtoken')
    op.drop_table('shippingaddress')
    op.drop_table('purchasemodel')
    op.drop_table('notificationmodel')
    op.drop_table('contactentrymodel')
    op.drop_table('blogpostmodel')
    op.drop_table('userinfo')
    with op.batch_alter_table('passwordresettoken', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_passwordresettoken_token'))

    op.drop_table('passwordresettoken')
    with op.batch_alter_table('localuser', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_localuser_username'))

    op.drop_table('localuser')
    with op.batch_alter_table('localauthsession', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_localauthsession_user_id'))
        batch_op.drop_index(batch_op.f('ix_localauthsession_session_id'))

    op.drop_table('localauthsession')
    # ### end Alembic commands ###

# ==============================================================================
# ARCHIVO 2: alembic/versions/e2a5a9e3d3c7_add_banned_fields_to_userinfo.py (CREAR NUEVO)
# Descripción: Esta es la migración de actualización. Arreglará tu base de
# datos existente en Railway.
# ==============================================================================
"""add banned fields to userinfo

Revision ID: e2a5a9e3d3c7
Revises: dc72dd3b2fae
Create Date: 2025-08-10 20:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'e2a5a9e3d3c7'
down_revision: Union[str, Sequence[str], None] = 'dc72dd3b2fae'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """
    Añade las columnas 'is_banned' y 'ban_expires_at' a la tabla 'userinfo' existente.
    """
    try:
        with op.batch_alter_table('userinfo', schema=None) as batch_op:
            batch_op.add_column(sa.Column('is_banned', sa.Boolean(), nullable=False, server_default=sa.text('false')))
            batch_op.add_column(sa.Column('ban_expires_at', sa.DateTime(), nullable=True))
    except Exception as e:
        # Esto evita que el script falle si por alguna razón las columnas ya existen.
        print(f"Advertencia al añadir columnas a userinfo (puede que ya existan): {e}")
        pass


def downgrade() -> None:
    """
    Revierte los cambios, eliminando las columnas.
    """
    try:
        with op.batch_alter_table('userinfo', schema=None) as batch_op:
            batch_op.drop_column('ban_expires_at')
            batch_op.drop_column('is_banned')
    except Exception as e:
        print(f"Advertencia al eliminar columnas de userinfo: {e}")
        pass
