# nixpacks.toml
# Este archivo le dice a Nixpacks cómo construir y ejecutar tu aplicación Reflex.

# Proveedor principal: Python.
providers = ['python']

# set up some variables to minimize annoyance
[variables]
    NEXT_TELEMETRY_DISABLED = '1' # disable next telemetry
    NPM_CONFIG_UPDATE_NOTIFIER = 'false' # the update check is relatively useless in a production environment
    NPM_CONFIG_FUND = 'false' # the fund notification is also relatively useless in a production environment
    PIP_DISABLE_PIP_VERSION_CHECK = '1' # the update check is relatively useless in a production environment

# Fase de setup: Instala paquetes del sistema operativo.
[phases.setup]
    apt_packages = ["git", "nodejs", "npm", "unzip", "parallel", "build-essential"]

# --- ELIMINA ESTA SECCIÓN ---
# [phases.init]
#     dependsOn = ['install'] 
#     cmds = ['reflex init --name full_stack_python'] 
# --- FIN DE SECCIÓN A ELIMINAR ---

# Fase de export: Exporta el frontend a una carpeta estática.
# Asegúrate de que tu rxconfig.py tenga api_url = "/backend"
[phases.export]
    # Ahora depende de 'install' directamente
    dependsOn = ['install'] 
    cmds = ['reflex export --frontend-only --no-zip'] 

# Fase de caddy: Instala Caddy.
[phases.caddy]
    dependsOn = ['export'] # Corre después de exportar el frontend.
    nixpkgsArchive = 'ced9bf9f7c303c7d4acc6c4a1bb44368c6baae3f' # Caddy v2.7.5
    nixPkgs = ['caddy'] # Instala Caddy.

# Fase de fmt (formateo): Formatea el Caddyfile (opcional).
[phases.fmt]
    dependsOn = ['caddy'] 
    cmds = ['caddy fmt --overwrite'] 

# Fase de inicio: Cómo se ejecuta tu aplicación.
[start]
    cmd = 'parallel --ungroup --halt now,fail=1 ::: "reflex run --backend-only --host 0.0.0.0 --port 8000 --loglevel info" "caddy run --config Caddyfile --adapter caddyfile 2>&1"'
